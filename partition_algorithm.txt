Preprocess: Run CoreNLP, do Sentence Split, Tokenize, Part of Speech and Coreference. Get the Coreference Sets C1, C2, ..., Cn, each pi ∈ Ck refers to the same person or thing Pk.
1. Read original article, sentence.pNum <- paragraph number.
2. Divide sentences into 4 types: Total_QUOTE (This is speech sentence), TOTAL_NORMAL (This is not speech sentence), QUOTE_NORMAL(The first half is speech sentence, others is not), NORMAL_QUOTE (The first half is not speech sentence, the others is).
  2.a QUOTE_FLAG <- False.
  2.b S <- The first/next sentence.
  2.c If S.pNum != last S.pNum, QUOTE_FLAG <- False.
  2.d If S[0] = "“" or "”", or QUOTE_FLAG = True, goto 2.g.
  2.e If S.find("“") > 0, S.type <- NORMAL_QUOTE, goto 2.h. 
  2.f S.type <- TOTAL_NORMAL, goto 2.b.
  2.g If S.find("”") > 0, S.type <- QUOTE_NORMAL, QUOTE_FLAG <- False.
      else S.type <- TOTAL_QUOTE, QUOTE_FLAG <- True. Goto 2.b.
  2.h If S.find("”") < 0, QUOTE_FLAG <- True. Goto 2.b.
  This algorithm will try to recover from some typo errors about "“" and "”" in articles.
3. Find the key noun (first noun) of each sentence.
  for every sentence S:
  3.a If S.type = QUOTE_NORMAL, S.key <- first noun/pronoun in S after token "”".
  3.b Else, S.key <- first noun/pronoun.
4. For each sentence S:
  4.a If S.type = TOTAL_NORMAL or NORMAL_QUOTE, S.belongsTo <- S.key.belongsTo.
  4.b If S.type = TOTAL_QUOTE, S' <- its most recent previous sentence, S.belongsTo <- S'.belongsTo.
  4.c If S.type = QUOTE_NORMAL, S.belongsTo <- S.key.belongsTo, then:
    For all previous sentence S' in order of recency:
    4.c.1 If S'.type =TOTAL_NORMAL, break;
    4.c.1 S'.belongsTo <- S.belongsTo.
  Note: When we find which coreference sets the key noun belongs to, if the key noun is pronoun, we need to use the coreference link we get from CoreNLP. If not (and it is the noun token), we find which coreference set contains its noun phrase.
Now, each coreference set represents a character, each S.belongsTo represents which character the sentence is about.
